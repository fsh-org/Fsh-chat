(async () => {
    // default imports
    const events = require('events');
    const {
        exec
    } = require("child_process")
    const logs = require("discord-logs")
    const Discord = require("discord.js")
    const {
        MessageEmbed,
        MessageButton,
        MessageActionRow,
        Intents,
        Permissions,
        MessageSelectMenu
    } = require("discord.js")
    const fs = require('fs');
    let process = require('process');
    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

    // block imports
    const os = require("os-utils");
    let https = require("https")
    const S4D_APP_PKG_axios = require('axios')
    const S4D_WEBSITECREATION_EXPRESS = require('express')
    const S4D_WEBSITECREATION_bodyParser = require('body-parser');
    const S4D_WEBSITECREATION_cors = require('cors');
    var S4D_WEBSITECREATION_path = require('path');
    const S4D_WEBSITECREATION_EXPRESS_app = S4D_WEBSITECREATION_EXPRESS();
    const Database = require("easy-json-database")

    // define s4d components (pretty sure 90% of these arnt even used/required)
    let s4d = {
        Discord,
        fire: null,
        joiningMember: null,
        reply: null,
        player: null,
        manager: null,
        Inviter: null,
        message: null,
        notifer: null,
        checkMessageExists() {
            if (!s4d.client) throw new Error('You cannot perform message operations without a Discord.js client')
            if (!s4d.client.readyTimestamp) throw new Error('You cannot perform message operations while the bot is not connected to the Discord API')
        }
    };

    // check if d.js is v13
    if (!require('./package.json').dependencies['discord.js'].startsWith("^13.")) {
        let file = JSON.parse(fs.readFileSync('package.json'))
        file.dependencies['discord.js'] = '^13.12.0'
        fs.writeFileSync('package.json', JSON.stringify(file))
        exec('npm i')
        throw new Error("Seems you arent using v13 please re-run or run `npm i discord.js@13.12.0`");
    }

    // check if discord-logs is v2
    if (!require('./package.json').dependencies['discord-logs'].startsWith("^2.")) {
        let file = JSON.parse(fs.readFileSync('package.json'))
        file.dependencies['discord-logs'] = '^2.0.0'
        fs.writeFileSync('package.json', JSON.stringify(file))
        exec('npm i')
        throw new Error("discord-logs must be 2.0.0. please re-run or if that fails run `npm i discord-logs@2.0.0` then re-run");
    }

    // create a new discord client
    s4d.client = new s4d.Discord.Client({
        intents: [
            Object.values(s4d.Discord.Intents.FLAGS).reduce((acc, p) => acc | p, 0)
        ],
        partials: [
            "REACTION",
            "CHANNEL"
        ]
    });

    // when the bot is connected say so
    s4d.client.on('ready', () => {
        console.log(s4d.client.user.tag + " is alive!")
    })

    // upon error print "Error!" and the error
    process.on('uncaughtException', function(err) {
        console.log('Error!');
        console.log(err);
    });

    // give the new client to discord-logs
    logs(s4d.client);

    // pre blockly code


    // blockly code
    var url;

    // Describe this function...
    function get_status(url) {
        S4D_APP_PKG_axios({
                method: "get",
                url: url,

                headers: {

                },

            })
            .then(async (response) => {
                console.log((response.status));
                if ((response.status) == 200) {
                    return 'online';
                }
                if ((response.status) == 503) {
                    return 'mantinence';
                }

            })
            .catch(async (err) => {
                console.log((err));

            });
        return 'offline';
    }


    const statuses = new Database('./statuses.json')
    s4d.client.on('ready', async () => {

        while (s4d.client && s4d.client.token) {
            await delay(50);
            statuses.set(String('website'), (get_status('https://fsh-bot.frostzzone.repl.co/')));
            statuses.set(String('api'), (get_status('https://fsh-bot.frostzzone.repl.co/api/info')));
            await delay(Number(5) * 1000);

            if (false) {
                console.log('ran')
            }
        }

    });

    /* IMPORTED - S4D Website Hosting Dependencies */
    let S4D_APP_WEBSITE_HOSTING_PORT = 8080

    S4D_WEBSITECREATION_EXPRESS_app.use(S4D_WEBSITECREATION_cors());
    S4D_WEBSITECREATION_EXPRESS_app.use(S4D_WEBSITECREATION_bodyParser.urlencoded({
        extended: false
    }));
    S4D_WEBSITECREATION_EXPRESS_app.use(S4D_WEBSITECREATION_bodyParser.json());

    S4D_WEBSITECREATION_EXPRESS_app.get('/', async function(req, res) {
        res.header("Content-Type", 'text/html')
        res.status(Number(200))
        res.send(String((String((String((String((fs.readFileSync('web/page/index.html', 'utf8'))).replaceAll('[status1]', String(statuses.get(String('bot')))))).replaceAll('[status2]', String(statuses.get(String('website')))))).replaceAll('[status3]', String(statuses.get(String('api')))))))

    })
    S4D_WEBSITECREATION_EXPRESS_app.get('/api', async function(req, res) {
        res.header("Content-Type", 'text/plain')
        res.status(Number(200))
        res.send(String('Hey!'))

    })
    S4D_WEBSITECREATION_EXPRESS_app.post('/alive', async function(req, res) {
        res.header("Content-Type", 'text/plain')
        res.status(Number(200))
        res.send(String('Hey!'))
        if (((req[String('body')])[String('ver')]) == (process.env[String('popcode')])) {
            console.log('a');
            statuses.set(String('bot'), 'online');
            statuses.set(String('bot-l'), (Math.floor(new Date().getTime() / 1000)));
        }

    })
    S4D_WEBSITECREATION_EXPRESS_app.use(function(req, res) {
        res.send(String('Page not found'))

    })


    S4D_WEBSITECREATION_EXPRESS_app.listen(S4D_APP_WEBSITE_HOSTING_PORT);
    return s4d
})();