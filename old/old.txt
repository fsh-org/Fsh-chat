(async () => {
    // default imports
    const events = require('events');
    const {
        exec
    } = require("child_process")
    const logs = require("discord-logs")
    const Discord = require("discord.js")
    const {
        MessageEmbed,
        MessageButton,
        MessageActionRow,
        Intents,
        Permissions,
        MessageSelectMenu
    } = require("discord.js")
    const fs = require('fs');
    let process = require('process');
    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

    // block imports
    const os = require("os-utils");
    const S4D_APP_write = require('write');
    const S4D_APP_CRYPTOJS = require("crypto-js");
    const S4D_WEBSITECREATION_EXPRESS = require('express')
    const S4D_WEBSITECREATION_bodyParser = require('body-parser');
    const S4D_WEBSITECREATION_cors = require('cors');
    var S4D_WEBSITECREATION_path = require('path');
    const S4D_WEBSITECREATION_EXPRESS_app = S4D_WEBSITECREATION_EXPRESS();
    const Database = require("easy-json-database")

    // define s4d components (pretty sure 90% of these arnt even used/required)
    let s4d = {
        Discord,
        fire: null,
        joiningMember: null,
        reply: null,
        player: null,
        manager: null,
        Inviter: null,
        message: null,
        notifer: null,
        checkMessageExists() {
            if (!s4d.client) throw new Error('You cannot perform message operations without a Discord.js client')
            if (!s4d.client.readyTimestamp) throw new Error('You cannot perform message operations while the bot is not connected to the Discord API')
        }
    };

    // check if d.js is v13
    if (!require('./package.json').dependencies['discord.js'].startsWith("^13.")) {
        let file = JSON.parse(fs.readFileSync('package.json'))
        file.dependencies['discord.js'] = '^13.15.1'
        fs.writeFileSync('package.json', JSON.stringify(file, null, 4))
        exec('npm i')
        throw new Error("Seems you arent using v13 please re-run or run `npm i discord.js@13.12.0`");
    }

    // check if discord-logs is v2
    if (!require('./package.json').dependencies['discord-logs'].startsWith("^2.")) {
        let file = JSON.parse(fs.readFileSync('package.json'))
        file.dependencies['discord-logs'] = '^2.0.0'
        fs.writeFileSync('package.json', JSON.stringify(file, null, 4))
        exec('npm i')
        throw new Error("discord-logs must be 2.0.0. please re-run or if that fails run `npm i discord-logs@2.0.0` then re-run");
    }

    // create a new discord client
    s4d.client = new s4d.Discord.Client({
        intents: [
            Object.values(s4d.Discord.Intents.FLAGS).reduce((acc, p) => acc | p, 0)
        ],
        partials: [
            "REACTION",
            "CHANNEL"
        ]
    });

    // when the bot is connected say so
    s4d.client.on('ready', () => {
        console.log(s4d.client.user.tag + " is alive!")
    })

    // upon error print "Error!" and the error
    process.on('uncaughtException', function(err) {
        console.log('Error!');
        console.log(err);
    });

    // give the new client to discord-logs
    logs(s4d.client);

    // pre blockly code


    // blockly code
    const passwords = new Database('./passwords.json')
    /* IMPORTED - S4D Website Hosting Dependencies */
    let S4D_APP_WEBSITE_HOSTING_PORT = 8080

    S4D_WEBSITECREATION_EXPRESS_app.use(S4D_WEBSITECREATION_cors());
    S4D_WEBSITECREATION_EXPRESS_app.use(S4D_WEBSITECREATION_bodyParser.urlencoded({
        extended: false
    }));
    S4D_WEBSITECREATION_EXPRESS_app.use(S4D_WEBSITECREATION_bodyParser.json());

    S4D_WEBSITECREATION_EXPRESS_app.get('/', async function(req, res) {
        res.sendFile(S4D_WEBSITECREATION_path.join(__dirname, String('index.html')))

    })
    S4D_WEBSITECREATION_EXPRESS_app.post('/set', async function(req, res) {
        if (String((req.query[String('name')])).includes(String('..'))) {
            res.status(Number(400))
            res.send(String('err'))
        } else {
            if (passwords.has(String((req.query[String('name')])))) {
                if (passwords.get(String((req.query[String('name')]))) == (S4D_APP_CRYPTOJS.SHA256((req.query[String('pwd')])))) {
                    try {
                        S4D_APP_write.sync(String(('files/' + String(req.query[String('name')]))), String((S4D_APP_CRYPTOJS.AES.encrypt(((req[String('body')])[String('data')]), (req.query[String('pwd')])).toString())), {
                            overwrite: true
                        });
                        res.send(String('succes'))

                    } catch (err) {
                        res.status(Number(500))
                        res.send(String('err'))
                        console.log((err));

                    }
                } else {
                    res.status(Number(400))
                    res.send(String('err'))
                }
            } else {
                try {
                    console.log((req[String('body')]));
                    console.log(req);
                    S4D_APP_write.sync(String(('files/' + String(req.query[String('name')]))), String(((req[String('body')])[String('data')])), {
                        overwrite: true
                    });
                    res.send(String('succes'))

                } catch (err) {
                    res.status(Number(500))
                    res.send(String('err'))
                    console.log((err));

                }
            }
        }

    })
    S4D_WEBSITECREATION_EXPRESS_app.get('/get', async function(req, res) {
        if (passwords.has(String((req.query[String('name')])))) {
            if (passwords.get(String((req.query[String('name')]))) == (S4D_APP_CRYPTOJS.SHA256((req.query[String('pwd')])))) {
                try {
                    if (String((req.query[String('name')])).includes(String('..'))) {
                        res.status(Number(400))
                        res.send(String('err'))
                    } else {
                        res.send(String((S4D_APP_CRYPTOJS.AES.decrypt((fs.readFileSync(('files/' + String(req.query[String('name')])), 'utf8')), (req.query[String('pwd')])).toString(S4D_APP_CRYPTOJS.enc.Utf8))))
                    }

                } catch (err) {
                    res.status(Number(500))
                    res.send(String('err'))
                    console.log((err));

                }
            } else {
                res.status(Number(400))
                res.send(String('err'))
            }
        } else {
            try {
                if (String((req.query[String('name')])).includes(String('..'))) {
                    res.status(Number(400))
                    res.send(String('err'))
                } else {
                    res.send(String((fs.readFileSync(('files/' + String(req.query[String('name')])), 'utf8'))))
                }

            } catch (err) {
                res.status(Number(500))
                res.send(String('err'))
                console.log((err));

            }
        }

    })


    S4D_WEBSITECREATION_EXPRESS_app.listen(S4D_APP_WEBSITE_HOSTING_PORT);
    return s4d
})();